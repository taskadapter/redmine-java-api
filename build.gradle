apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

apply plugin: 'eclipse'
apply plugin: 'idea'


group = 'com.taskadapter'
version = '1.23'

sourceCompatibility = 1.6
targetCompatibility = 1.6

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.0.0' // coveralls plugin depends on cobertura plugin
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.1.6'
    }
}

apply plugin: 'cobertura'
apply plugin: 'coveralls'
cobertura.coverageFormats = ['html', 'xml']

tasks.withType(Compile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    compile ('org.apache.httpcomponents:httpclient:4.2',
            'org.apache.httpcomponents:httpcore:4.2',
            'org.json:json:20090211',
            'org.slf4j:slf4j-api:1.7.1')

    testCompile(
            'junit:junit:4.10',
            'org.slf4j:slf4j-jdk14:1.7.1'
    )
}

// A PGP key is required to sign the artifacts before uploading to OSS Sonatype Maven repository.
// Put the PGP key info in your <home>/.gradle/gradle.properties file:
// signing.keyId=...
// signing.password=...
// signing.secretKeyRingFile=c:/Users/ask/.gnupg/secring.gpg
if (signing.signatory) {
    signing {
        sign configurations.archives
    }
}

uploadArchives {
    repositories {
        mavenDeployer {

            if (signing.signatory) {
                beforeDeployment {
                    signing.signPom(it)
                }
                // set "ossUser" and "ossPassword" properties in your <home>/.gradle/gradle.properties file,
                // standard properties file format: "ossUser=myOssUser", etc.
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: ossUser, password: ossPassword)
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                    authentication(userName: ossUser, password: ossPassword)
                }
            }

            pom.project {
                name 'Redmine Java API'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                url 'http://github.com/taskadapter/redmine-java-api'
                description 'Free open-source Java API for Redmine and Chiliproject bug/task management systems.' +
                        'This project was originally a part of Task Adapter application (http://www.taskadapter.com)'
                developers {
                    developer {
                        name 'Alexey Skorokhodov'
                        email 'alskor@gmail.com'
                    }
                }
                scm {
                    connection 'scm:git:git://github.com/taskadapter/redmine-java-api.git'
                    // "developerConnection" is required for Maven Release plugin.
                    developerConnection 'scm:git:git@github.com:taskadapter/redmine-java-api.git'
                    tag 'HEAD'
                    // A publicly browsable repository. For example, via ViewCVS
                    url 'http://github.com/taskadapter/redmine-java-api/tree/master/'
                }

                issueManagement {
                    system 'github'
                    url 'http://github.com/taskadapter/redmine-java-api/issues'
                }
            }
        }
    }
}

task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives packageSources
    archives packageJavadoc
}
